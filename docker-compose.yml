version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: qiyal_postgres
    environment:
      POSTGRES_DB: qiyal_ai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_MULTIPLE_DATABASES: qiyal_ai_test
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d

    networks:
      - qiyal_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d qiyal_ai"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: qiyal_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - qiyal_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: qiyal_backend
    command: sh -c "npx prisma migrate deploy && npm start"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/qiyal_ai
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-jwt-secret-key-here
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      PINECONE_API_KEY: ${PINECONE_API_KEY}
      PINECONE_INDEX_NAME: ${PINECONE_INDEX_NAME}
      PORT: 4000

    ports:
      - "4000:4000"

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - qiyal_network
    restart: unless-stopped

  backend-tests:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: qiyal_backend_tests
    command: sh -c "npm test"
    environment:
      NODE_ENV: test
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/qiyal_ai_test
      JWT_SECRET: your-jwt-secret-key-here
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - qiyal_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: qiyal_frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: /graphql
      NEXT_PUBLIC_WS_URL: /graphql
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - qiyal_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: qiyal_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - qiyal_network
    restart: unless-stopped
    profiles:
      - production

  adminer:
    image: adminer:latest
    container_name: qiyal_adminer
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_started
    networks:
      - qiyal_network
    restart: unless-stopped
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  qiyal_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16